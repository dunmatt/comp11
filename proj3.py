#!/usr/bin/env python
"""Project 3 Grading Script

Usage:
    ./proj3.py <dir> <files>...
"""

from utilities import *

submission_filters = {
    "required": ["wordfreq.cpp", "FrequencyTable1.h", "FrequencyTable1.cpp", "FrequencyTable2.h", "FrequencyTable2.cpp", "WordFreqList.h", "WordFreqList.cpp"]
    , "permitted": []
}

def buildTable(version="1"):
  run("rm", ["-f", "FrequencyTable.h", "FrequencyTable.o"])
  run("ln", ["-s", "FrequencyTable%s.h" % version, "FrequencyTable.h"])
  return build(["wordfreq.cpp"
                , "FrequencyTable%s.cpp" % version
                , "WordFreqList.cpp"
               ], "wordfreq%s" % version)

if __name__ == "__main__":
    from docopt import docopt
    arguments = docopt(__doc__, version="Tufts Comp11 Project1 v2014s")
    screenUname(".el6")
    screenGxx((4, 8, 0))  # this means g++ >= 4.8.0
    screenFilenames(arguments["<files>"], submission_filters)
    # run("cp", ["../../tests/proj1/ddrlib.h", "."])
    (code1, _, err1) = buildTable("1")
    (code2, _, err2) = buildTable("2")

    # create thing called testhw5 so that t will work
    with getReport() as f:
        (return_code, stdout, stderr) = run("python", ["../../tests/proj3/proj3_test.py"])
        f.write(stdout)
        print stdout

        if code1 or code2:
            print "Here are the errors generated by the compiler:"
            print err1
            print err2
            print "Your code did not build!"
            f.write("Here are the errors generated by the compiler:\n")
            f.write(err1)
            f.write(err2)
            f.write("Your code did not build!\n")


